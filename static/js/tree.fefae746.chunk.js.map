{"version":3,"sources":["components/CustomBreadcrumb/CustomBreadcrumb.jsx","components/CustomBreadcrumb/index.js","views/ShowView/Tree/Tree.jsx","views/ShowView/Tree/index.js"],"names":["CustomBreadcrumb","props","style","marginBottom","Item","to","arr","map","res","key","path","title","TreeNode","treeData","children","Search","gData","generateData","_level","_preKey","_tns","preKey","tns","i","push","level","forEach","index","dataList","generateList","data","length","node","getParentKey","tree","parentKey","some","item","TreeView","state","expandedKeys","autoExpandParent","checkedKeys","selectedKeys","searchValue","onDragEnter","info","console","log","setState","onExpand","onDrop","dragObj","dropKey","eventKey","dragKey","dragNode","dropPos","pos","split","dropPosition","Number","loop","callback","splice","dropToGap","expanded","unshift","ar","onCheck","onSelect","renderTreeNodes","dataRef","onChange","e","value","target","indexOf","filter","self","this","beforeStr","substr","afterStr","color","className","gutter","span","orientation","checkable","showIcon","defaultExpandedKeys","defaultSelectedKeys","defaultCheckedKeys","icon","type","disabled","disableCheckbox","placeholder","showLine","draggable","blockNode","Component"],"mappings":"gKA0BeA,EAtBU,SAAAC,GACrB,OACI,uBAAYC,MAAO,CAAEC,aAAc,KAC/B,sBAAYC,KAAZ,KACI,kBAAC,IAAD,CAAMC,GAAG,UAAT,iBAEHJ,EAAMK,KACHL,EAAMK,IAAIC,KAAI,SAAAC,GACV,MAAmB,kBAARA,EAEH,sBAAYJ,KAAZ,CAAiBK,IAAKD,EAAIE,MACtB,kBAAC,IAAD,CAAML,GAAIG,EAAIE,MAAOF,EAAIG,QAI1B,sBAAYP,KAAZ,CAAiBK,IAAKD,GAAMA,QCjB5CR,O,wOCEPY,E,IAAAA,SAEFC,EAAW,CACb,CACIF,MAAO,MACPF,IAAK,MACLK,SAAU,CACN,CACIH,MAAO,QACPF,IAAK,QACLK,SAAU,CACN,CAAEH,MAAO,UAAWF,IAAK,WACzB,CAAEE,MAAO,UAAWF,IAAK,WACzB,CAAEE,MAAO,UAAWF,IAAK,aAGjC,CACIE,MAAO,QACPF,IAAK,QACLK,SAAU,CACN,CAAEH,MAAO,UAAWF,IAAK,WACzB,CAAEE,MAAO,UAAWF,IAAK,WACzB,CAAEE,MAAO,UAAWF,IAAK,aAGjC,CACIE,MAAO,QACPF,IAAK,WAIjB,CACIE,MAAO,MACPF,IAAK,MACLK,SAAU,CACN,CAAEH,MAAO,UAAWF,IAAK,WACzB,CAAEE,MAAO,UAAWF,IAAK,WACzB,CAAEE,MAAO,UAAWF,IAAK,aAGjC,CACIE,MAAO,MACPF,IAAK,QAILM,E,IAAAA,OAKFC,EAAQ,IAEO,SAAfC,EAAgBC,EAAQC,EAASC,GAKnC,IAJA,IAAMC,EAASF,GAAW,IACpBG,EAAMF,GAAQJ,EAEdF,EAAW,GACRS,EAAI,EAAGA,EAVV,EAUiBA,IAAK,CACxB,IAAMd,EAAG,UAAMY,EAAN,YAAgBE,GACzBD,EAAIE,KAAK,CAAEb,MAAOF,EAAKA,QACnBc,EAZF,GAaET,EAASU,KAAKf,GAGtB,GAAIS,EAAS,EACT,OAAOI,EAEX,IAAMG,EAAQP,EAAS,EACvBJ,EAASY,SAAQ,SAACjB,EAAKkB,GAEnB,OADAL,EAAIK,GAAOb,SAAW,GACfG,EAAaQ,EAAOhB,EAAKa,EAAIK,GAAOb,aAGnDG,CAxBU,GA0BV,IAAMW,EAAW,IACI,SAAfC,EAAeC,GACjB,IAAK,IAAIP,EAAI,EAAGA,EAAIO,EAAKC,OAAQR,IAAK,CAClC,IAAMS,EAAOF,EAAKP,GACVd,EAAQuB,EAARvB,IACRmB,EAASJ,KAAK,CAAEf,MAAKE,MAAOF,IACxBuB,EAAKlB,UACLe,EAAaG,EAAKlB,WAI9Be,CAAab,GAEb,IAAMiB,EAAe,SAAfA,EAAgBxB,EAAKyB,GAEvB,IADA,IAAIC,EACKZ,EAAI,EAAGA,EAAIW,EAAKH,OAAQR,IAAK,CAClC,IAAMS,EAAOE,EAAKX,GACdS,EAAKlB,WACDkB,EAAKlB,SAASsB,MAAK,SAAAC,GAAI,OAAIA,EAAK5B,MAAQA,KACxC0B,EAAYH,EAAKvB,IACVwB,EAAaxB,EAAKuB,EAAKlB,YAC9BqB,EAAYF,EAAaxB,EAAKuB,EAAKlB,YAI/C,OAAOqB,GAyPIG,E,2MArPXC,MAAQ,CACJC,aAAc,CAAC,QAAS,SACxBC,kBAAkB,EAClBC,YAAa,CAAC,SACdC,aAAc,GACdC,YAAa,GACb5B,S,EAGJ6B,YAAc,SAAAC,GACVC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACVT,aAAcM,EAAKN,gB,EAI3BU,SAAW,SAAAV,GACPO,QAAQC,IAAI,WAAYR,GACxB,EAAKS,SAAS,CACVT,eACAC,kBAAkB,K,EAI1BU,OAAS,SAAAL,GACLC,QAAQC,IAAIF,GACZ,IAkBIM,EAlBEC,EAAUP,EAAKd,KAAK/B,MAAMqD,SAC1BC,EAAUT,EAAKU,SAASvD,MAAMqD,SAC9BG,EAAUX,EAAKd,KAAK/B,MAAMyD,IAAIC,MAAM,KACpCC,EAAed,EAAKc,aAAeC,OAAOJ,EAAQA,EAAQ1B,OAAS,IAEnE+B,EAAO,SAAPA,EAAQhC,EAAMrB,EAAKsD,GACrBjC,EAAKJ,SAAQ,SAACW,EAAMV,EAAOrB,GACvB,OAAI+B,EAAK5B,MAAQA,EACNsD,EAAS1B,EAAMV,EAAOrB,GAE7B+B,EAAKvB,SACEgD,EAAKzB,EAAKvB,SAAUL,EAAKsD,QADpC,MAKFjC,EAAI,YAAO,EAAKS,MAAMvB,OAS5B,GALA8C,EAAKhC,EAAMyB,GAAS,SAAClB,EAAMV,EAAOrB,GAC9BA,EAAI0D,OAAOrC,EAAO,GAClByB,EAAUf,KAGTS,EAAKmB,UAOH,IACFnB,EAAKd,KAAK/B,MAAMa,UAAY,IAAIiB,OAAS,GAC1Ce,EAAKd,KAAK/B,MAAMiE,UACC,IAAjBN,EAEAE,EAAKhC,EAAMuB,GAAS,SAAAhB,GAChBA,EAAKvB,SAAWuB,EAAKvB,UAAY,GAEjCuB,EAAKvB,SAASqD,QAAQf,UAEvB,CACH,IAAIgB,EACA7C,EACJuC,EAAKhC,EAAMuB,GAAS,SAAChB,EAAMV,EAAOrB,GAC9B8D,EAAK9D,EACLiB,EAAII,MAEc,IAAlBiC,EACAQ,EAAGJ,OAAOzC,EAAG,EAAG6B,GAEhBgB,EAAGJ,OAAOzC,EAAI,EAAG,EAAG6B,QAzBxBU,EAAKhC,EAAMuB,GAAS,SAAAhB,GAChBA,EAAKvB,SAAWuB,EAAKvB,UAAY,GAEjCuB,EAAKvB,SAASU,KAAK4B,MA0B3B,EAAKH,SAAS,CACVjC,MAAOc,K,EAIfuC,QAAU,SAAA3B,GACNK,QAAQC,IAAI,UAAWN,GACvB,EAAKO,SAAS,CAAEP,iB,EAGpB4B,SAAW,SAAC3B,EAAcG,GACtBC,QAAQC,IAAI,WAAYF,GACxB,EAAKG,SAAS,CAAEN,kB,EAGpB4B,gBAAkB,SAAAzC,GAAI,OAClBA,EAAKvB,KAAI,SAAA8B,GACL,OAAIA,EAAKvB,SAED,kBAACF,EAAD,CAAUD,MAAO0B,EAAK1B,MAAOF,IAAK4B,EAAK5B,IAAK+D,QAASnC,GAChD,EAAKkC,gBAAgBlC,EAAKvB,WAIhC,kBAACF,EAAD,eAAUH,IAAK4B,EAAK5B,KAAS4B,Q,EAG5CoC,SAAW,SAAAC,GAAM,IACLC,EAAUD,EAAEE,OAAZD,MACFnC,EAAeZ,EAChBrB,KAAI,SAAA8B,GACD,OAAIA,EAAK1B,MAAMkE,QAAQF,IAAU,EACtB1C,EAAaI,EAAK5B,IAAKO,GAE3B,QAEV8D,QAAO,SAACzC,EAAMd,EAAGwD,GAAV,OAAmB1C,GAAQ0C,EAAKF,QAAQxC,KAAUd,KAC9D,EAAK0B,SAAS,CACVT,eACAI,YAAa+B,EACblC,kBAAkB,K,wEAIhB,IAAD,EACmDuC,KAAKzC,MAArDK,EADH,EACGA,YAAaJ,EADhB,EACgBA,aAAcC,EAD9B,EAC8BA,iBAY7BqB,EAAO,SAAPA,EAAOhC,GAAI,OACbA,EAAKvB,KAAI,SAAA8B,GACL,IAAMV,EAAQU,EAAK1B,MAAMkE,QAAQjC,GAC3BqC,EAAY5C,EAAK1B,MAAMuE,OAAO,EAAGvD,GACjCwD,EAAW9C,EAAK1B,MAAMuE,OAAOvD,EAAQiB,EAAYb,QACjDpB,EACFgB,GAAS,EACL,8BACKsD,EACD,0BAAM/E,MAAO,CAAEkF,MAAO,SAAWxC,GAChCuC,GAGL,8BAAO9C,EAAK1B,OAEpB,OAAI0B,EAAKvB,SAED,kBAACF,EAAD,CAAUH,IAAK4B,EAAK5B,IAAKE,MAAOA,GAC3BmD,EAAKzB,EAAKvB,WAIhB,kBAACF,EAAD,CAAUH,IAAK4B,EAAK5B,IAAKE,MAAOA,QAE/C,OACI,uBAAQ0E,UAAU,mBACd,6BACI,kBAACrF,EAAA,EAAD,CAAkBM,IAAK,CAAC,eAAM,+BAElC,yBAAK+E,UAAU,cACX,wDACA,4BACA,kdAKJ,uBAAKC,OAAQ,GACT,uBAAKC,KAAM,IACP,yBAAKF,UAAU,cACX,uBAASG,YAAY,QAArB,4BACA,uBACIC,WAAS,EACTC,UAAQ,EACRC,oBAAqB,CAAC,QAAS,SAC/BC,oBAAqB,CAAC,QAAS,SAC/BC,mBAAoB,CAAC,QAAS,SAC9BvB,SAAUU,KAAKV,SACfD,QAASW,KAAKX,SACd,kBAACzD,EAAD,CAAUD,MAAM,WAAWF,IAAI,OAC3B,kBAACG,EAAD,CAAUkF,KAAM,uBAAMC,KAAK,UAAYpF,MAAM,aAAaF,IAAI,QAAQuF,UAAQ,GAC1E,kBAACpF,EAAD,CAAUD,MAAM,OAAOF,IAAI,UAAUwF,iBAAe,IACpD,kBAACrF,EAAD,CAAUD,MAAM,OAAOF,IAAI,aAE/B,kBAACG,EAAD,CAAUD,MAAM,aAAaF,IAAI,QAAQqF,KAAM,uBAAMC,KAAK,WACtD,kBAACnF,EAAD,CAAUD,MAAO,0BAAMT,MAAO,CAAEkF,MAAO,YAAtB,OAA+C3E,IAAI,gBAKpF,yBAAK4E,UAAU,cACX,uBAASG,YAAY,QAArB,sBACA,kBAACzE,EAAD,CAAQb,MAAO,CAAEC,aAAc,GAAK+F,YAAY,SAASzB,SAAUO,KAAKP,WACxE,uBACI0B,UAAQ,EACRjD,SAAU8B,KAAK9B,SACfV,aAAcA,EACdC,iBAAkBA,GACjBqB,EAAK9C,MAIlB,uBAAKuE,KAAM,IACP,yBAAKF,UAAU,cACX,uBAASG,YAAY,QAArB,4BACA,uBACIC,WAAS,EACTvC,SAAU8B,KAAK9B,SACfV,aAAcwC,KAAKzC,MAAMC,aACzBC,iBAAkBuC,KAAKzC,MAAME,iBAC7B4B,QAASW,KAAKX,QACd3B,YAAasC,KAAKzC,MAAMG,YACxB4B,SAAUU,KAAKV,SACf3B,aAAcqC,KAAKzC,MAAMI,cACxBqC,KAAKT,gBAAgB1D,KAG9B,yBAAKwE,UAAU,cACX,uBAASG,YAAY,QAArB,sBACA,uBACIH,UAAU,iBACVM,oBAAqBX,KAAKzC,MAAMC,aAChC4D,WAAS,EACTC,WAAS,EACTxD,YAAamC,KAAKnC,YAClBM,OAAQ6B,KAAK7B,QACH6B,KAAKzC,MAAMvB,MA1GpCT,KAAI,SAAA8B,GACL,OAAIA,EAAKvB,UAAYuB,EAAKvB,SAASiB,OAE3B,kBAACnB,EAAD,CAAUH,IAAK4B,EAAK5B,IAAKE,MAAO0B,EAAK1B,OAChCmD,EAAKzB,EAAKvB,WAIhB,kBAACF,EAAD,CAAUH,IAAK4B,EAAK5B,IAAKE,MAAO0B,EAAK1B,oB,GA1IrC2F,aC1GRhE","file":"static/js/tree.fefae746.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Breadcrumb } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CustomBreadcrumb = props => {\r\n    return (\r\n        <Breadcrumb style={{ marginBottom: 16 }}>\r\n            <Breadcrumb.Item>\r\n                <Link to=\"/index\">首页</Link>\r\n            </Breadcrumb.Item>\r\n            {props.arr &&\r\n                props.arr.map(res => {\r\n                    if (typeof res === 'object') {\r\n                        return (\r\n                            <Breadcrumb.Item key={res.path}>\r\n                                <Link to={res.path}>{res.title}</Link>\r\n                            </Breadcrumb.Item>\r\n                        )\r\n                    } else {\r\n                        return <Breadcrumb.Item key={res}>{res}</Breadcrumb.Item>\r\n                    }\r\n                })}\r\n        </Breadcrumb>\r\n    )\r\n}\r\n\r\nexport default CustomBreadcrumb\r\n","import CustomBreadcrumb from './CustomBreadcrumb.jsx'\r\n\r\nexport default CustomBreadcrumb\r\n","import React, { Component } from 'react'\r\nimport CustomBreadcrumb from '../../../components/CustomBreadcrumb'\r\nimport { Layout, Divider, Row, Col, Tree, Input, Icon } from 'antd'\r\n\r\nconst { TreeNode } = Tree\r\n\r\nconst treeData = [\r\n    {\r\n        title: '0-0',\r\n        key: '0-0',\r\n        children: [\r\n            {\r\n                title: '0-0-0',\r\n                key: '0-0-0',\r\n                children: [\r\n                    { title: '0-0-0-0', key: '0-0-0-0' },\r\n                    { title: '0-0-0-1', key: '0-0-0-1' },\r\n                    { title: '0-0-0-2', key: '0-0-0-2' }\r\n                ]\r\n            },\r\n            {\r\n                title: '0-0-1',\r\n                key: '0-0-1',\r\n                children: [\r\n                    { title: '0-0-1-0', key: '0-0-1-0' },\r\n                    { title: '0-0-1-1', key: '0-0-1-1' },\r\n                    { title: '0-0-1-2', key: '0-0-1-2' }\r\n                ]\r\n            },\r\n            {\r\n                title: '0-0-2',\r\n                key: '0-0-2'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: '0-1',\r\n        key: '0-1',\r\n        children: [\r\n            { title: '0-1-0-0', key: '0-1-0-0' },\r\n            { title: '0-1-0-1', key: '0-1-0-1' },\r\n            { title: '0-1-0-2', key: '0-1-0-2' }\r\n        ]\r\n    },\r\n    {\r\n        title: '0-2',\r\n        key: '0-2'\r\n    }\r\n]\r\n\r\nconst { Search } = Input\r\n\r\nconst x = 3\r\nconst y = 2\r\nconst z = 1\r\nconst gData = []\r\n\r\nconst generateData = (_level, _preKey, _tns) => {\r\n    const preKey = _preKey || '0'\r\n    const tns = _tns || gData\r\n\r\n    const children = []\r\n    for (let i = 0; i < x; i++) {\r\n        const key = `${preKey}-${i}`\r\n        tns.push({ title: key, key })\r\n        if (i < y) {\r\n            children.push(key)\r\n        }\r\n    }\r\n    if (_level < 0) {\r\n        return tns\r\n    }\r\n    const level = _level - 1\r\n    children.forEach((key, index) => {\r\n        tns[index].children = []\r\n        return generateData(level, key, tns[index].children)\r\n    })\r\n}\r\ngenerateData(z)\r\n\r\nconst dataList = []\r\nconst generateList = data => {\r\n    for (let i = 0; i < data.length; i++) {\r\n        const node = data[i]\r\n        const { key } = node\r\n        dataList.push({ key, title: key })\r\n        if (node.children) {\r\n            generateList(node.children)\r\n        }\r\n    }\r\n}\r\ngenerateList(gData)\r\n\r\nconst getParentKey = (key, tree) => {\r\n    let parentKey\r\n    for (let i = 0; i < tree.length; i++) {\r\n        const node = tree[i]\r\n        if (node.children) {\r\n            if (node.children.some(item => item.key === key)) {\r\n                parentKey = node.key\r\n            } else if (getParentKey(key, node.children)) {\r\n                parentKey = getParentKey(key, node.children)\r\n            }\r\n        }\r\n    }\r\n    return parentKey\r\n}\r\n\r\nclass TreeView extends Component {\r\n    state = {\r\n        expandedKeys: ['0-0-0', '0-0-1'],\r\n        autoExpandParent: true,\r\n        checkedKeys: ['0-0-0'],\r\n        selectedKeys: [],\r\n        searchValue: '',\r\n        gData\r\n    }\r\n\r\n    onDragEnter = info => {\r\n        console.log(info)\r\n        // expandedKeys 需要受控时设置\r\n        this.setState({\r\n            expandedKeys: info.expandedKeys\r\n        })\r\n    }\r\n\r\n    onExpand = expandedKeys => {\r\n        console.log('onExpand', expandedKeys)\r\n        this.setState({\r\n            expandedKeys,\r\n            autoExpandParent: false\r\n        })\r\n    }\r\n\r\n    onDrop = info => {\r\n        console.log(info)\r\n        const dropKey = info.node.props.eventKey\r\n        const dragKey = info.dragNode.props.eventKey\r\n        const dropPos = info.node.props.pos.split('-')\r\n        const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1])\r\n\r\n        const loop = (data, key, callback) => {\r\n            data.forEach((item, index, arr) => {\r\n                if (item.key === key) {\r\n                    return callback(item, index, arr)\r\n                }\r\n                if (item.children) {\r\n                    return loop(item.children, key, callback)\r\n                }\r\n            })\r\n        }\r\n        const data = [...this.state.gData]\r\n\r\n        // Find dragObject\r\n        let dragObj\r\n        loop(data, dragKey, (item, index, arr) => {\r\n            arr.splice(index, 1)\r\n            dragObj = item\r\n        })\r\n\r\n        if (!info.dropToGap) {\r\n            // Drop on the content\r\n            loop(data, dropKey, item => {\r\n                item.children = item.children || []\r\n                // where to insert 示例添加到尾部，可以是随意位置\r\n                item.children.push(dragObj)\r\n            })\r\n        } else if (\r\n            (info.node.props.children || []).length > 0 && // Has children\r\n            info.node.props.expanded && // Is expanded\r\n            dropPosition === 1 // On the bottom gap\r\n        ) {\r\n            loop(data, dropKey, item => {\r\n                item.children = item.children || []\r\n                // where to insert 示例添加到尾部，可以是随意位置\r\n                item.children.unshift(dragObj)\r\n            })\r\n        } else {\r\n            let ar\r\n            let i\r\n            loop(data, dropKey, (item, index, arr) => {\r\n                ar = arr\r\n                i = index\r\n            })\r\n            if (dropPosition === -1) {\r\n                ar.splice(i, 0, dragObj)\r\n            } else {\r\n                ar.splice(i + 1, 0, dragObj)\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            gData: data\r\n        })\r\n    }\r\n\r\n    onCheck = checkedKeys => {\r\n        console.log('onCheck', checkedKeys)\r\n        this.setState({ checkedKeys })\r\n    }\r\n\r\n    onSelect = (selectedKeys, info) => {\r\n        console.log('onSelect', info)\r\n        this.setState({ selectedKeys })\r\n    }\r\n\r\n    renderTreeNodes = data =>\r\n        data.map(item => {\r\n            if (item.children) {\r\n                return (\r\n                    <TreeNode title={item.title} key={item.key} dataRef={item}>\r\n                        {this.renderTreeNodes(item.children)}\r\n                    </TreeNode>\r\n                )\r\n            }\r\n            return <TreeNode key={item.key} {...item} />\r\n        })\r\n\r\n    onChange = e => {\r\n        const { value } = e.target\r\n        const expandedKeys = dataList\r\n            .map(item => {\r\n                if (item.title.indexOf(value) > -1) {\r\n                    return getParentKey(item.key, gData)\r\n                }\r\n                return null\r\n            })\r\n            .filter((item, i, self) => item && self.indexOf(item) === i)\r\n        this.setState({\r\n            expandedKeys,\r\n            searchValue: value,\r\n            autoExpandParent: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { searchValue, expandedKeys, autoExpandParent } = this.state\r\n        const loopDrop = data =>\r\n            data.map(item => {\r\n                if (item.children && item.children.length) {\r\n                    return (\r\n                        <TreeNode key={item.key} title={item.title}>\r\n                            {loop(item.children)}\r\n                        </TreeNode>\r\n                    )\r\n                }\r\n                return <TreeNode key={item.key} title={item.title} />\r\n            })\r\n        const loop = data =>\r\n            data.map(item => {\r\n                const index = item.title.indexOf(searchValue)\r\n                const beforeStr = item.title.substr(0, index)\r\n                const afterStr = item.title.substr(index + searchValue.length)\r\n                const title =\r\n                    index > -1 ? (\r\n                        <span>\r\n                            {beforeStr}\r\n                            <span style={{ color: '#f50' }}>{searchValue}</span>\r\n                            {afterStr}\r\n                        </span>\r\n                    ) : (\r\n                        <span>{item.title}</span>\r\n                    )\r\n                if (item.children) {\r\n                    return (\r\n                        <TreeNode key={item.key} title={title}>\r\n                            {loop(item.children)}\r\n                        </TreeNode>\r\n                    )\r\n                }\r\n                return <TreeNode key={item.key} title={title} />\r\n            })\r\n        return (\r\n            <Layout className='animated fadeIn'>\r\n                <div>\r\n                    <CustomBreadcrumb arr={['展示', '树形控件']}></CustomBreadcrumb>\r\n                </div>\r\n                <div className='base-style'>\r\n                    <h3>何时使用</h3>\r\n                    <Divider />\r\n                    <p>\r\n                        文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用 树控件\r\n                        可以完整展现其中的层级关系，并具有展开收起选择等交互功能。\r\n                    </p>\r\n                </div>\r\n                <Row gutter={8}>\r\n                    <Col span={12}>\r\n                        <div className='base-style'>\r\n                            <Divider orientation='left'>基础用法</Divider>\r\n                            <Tree\r\n                                checkable\r\n                                showIcon\r\n                                defaultExpandedKeys={['0-0-0', '0-0-1']}\r\n                                defaultSelectedKeys={['0-0-0', '0-0-1']}\r\n                                defaultCheckedKeys={['0-0-0', '0-0-1']}\r\n                                onSelect={this.onSelect}\r\n                                onCheck={this.onCheck}>\r\n                                <TreeNode title='parent 1' key='0-0'>\r\n                                    <TreeNode icon={<Icon type='meh-o' />} title='parent 1-0' key='0-0-0' disabled>\r\n                                        <TreeNode title='leaf' key='0-0-0-0' disableCheckbox />\r\n                                        <TreeNode title='leaf' key='0-0-0-1' />\r\n                                    </TreeNode>\r\n                                    <TreeNode title='parent 1-1' key='0-0-1' icon={<Icon type='meh-o' />}>\r\n                                        <TreeNode title={<span style={{ color: '#1890ff' }}>sss</span>} key='0-0-1-0' />\r\n                                    </TreeNode>\r\n                                </TreeNode>\r\n                            </Tree>\r\n                        </div>\r\n                        <div className='base-style'>\r\n                            <Divider orientation='left'>可搜索</Divider>\r\n                            <Search style={{ marginBottom: 8 }} placeholder='Search' onChange={this.onChange} />\r\n                            <Tree\r\n                                showLine\r\n                                onExpand={this.onExpand}\r\n                                expandedKeys={expandedKeys}\r\n                                autoExpandParent={autoExpandParent}>\r\n                                {loop(gData)}\r\n                            </Tree>\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <div className='base-style'>\r\n                            <Divider orientation='left'>受控控件</Divider>\r\n                            <Tree\r\n                                checkable\r\n                                onExpand={this.onExpand}\r\n                                expandedKeys={this.state.expandedKeys}\r\n                                autoExpandParent={this.state.autoExpandParent}\r\n                                onCheck={this.onCheck}\r\n                                checkedKeys={this.state.checkedKeys}\r\n                                onSelect={this.onSelect}\r\n                                selectedKeys={this.state.selectedKeys}>\r\n                                {this.renderTreeNodes(treeData)}\r\n                            </Tree>\r\n                        </div>\r\n                        <div className='base-style'>\r\n                            <Divider orientation='left'>可拖拽</Divider>\r\n                            <Tree\r\n                                className='draggable-tree'\r\n                                defaultExpandedKeys={this.state.expandedKeys}\r\n                                draggable\r\n                                blockNode\r\n                                onDragEnter={this.onDragEnter}\r\n                                onDrop={this.onDrop}>\r\n                                {loopDrop(this.state.gData)}\r\n                            </Tree>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TreeView\r\n","import TreeView from './Tree.jsx'\r\n\r\nexport default TreeView\r\n"],"sourceRoot":""}